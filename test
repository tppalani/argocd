#!/bin/bash

# Assuming the secret is mounted at /secrets/mysecret
SECRET_PATH="/secrets/mysecret"

# Read the values from the secret files
USERNAME=$(cat "$SECRET_PATH/username")
PASSWORD=$(cat "$SECRET_PATH/password")

# Use the secret values in your script
echo "Username: $USERNAME"
echo "Password: $PASSWORD"

# Your script logic here


apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
    - name: mycontainer
      image: myimage
      volumeMounts:
        - name: secret-volume
          mountPath: /secrets
  volumes:
    - name: secret-volume
      secret:
        secretName: mysecret

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: gcloud-auth-login
spec:
  steps:
    - name: gcloud-auth
      image: google/cloud-sdk:latest
      command:
        - /bin/bash
      args:
        - -c
        - |
          echo "$GCLOUD_SERVICE_KEY" > /tmp/key.json && \
          gcloud auth activate-service-account --key-file=/tmp/key.json
      env:
        - name: GCLOUD_SERVICE_KEY
          value: "$(SecretKeyRef)"
  params:
    - name: SecretKeyRef
      description: "Reference to the secret containing the service account key"
      type: string
---
The google/cloud-sdk:latest image is used, which contains the gcloud command.
The Task expects a secret containing the service account key to be provided as a parameter. This secret is referenced as SecretKeyRef.
The gcloud auth activate-service-account command is used to authenticate using the provided service account key.
You can use this Task as part of a Tekton PipelineRun to execute the gcloud auth login step within your pipeline. Ensure that the Tekton environment has access to the necessary credentials and permissions to execute gcloud commands and manage secrets. Additionally, customize the Task and PipelineRun according to your specific requirements and environment configurations.
